@mixin grid($name:"columns", $gutter: 0, $vertical-gutter: $gutter, $mobile: 320px, $tablet: 768px) {
    .#{$name} {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }
    /**
     * .equal-cols will set all children to flex: 1 and width: auto
     * Setting flex-basis to 0 means padding on the child elements doesn't affect the equal distribution
     * This forces all children to equally expand to fill the available space.
     * Gutters are set by margin-left and margin-right.
     *
     * Children should not have width classes set, which means
     * .equal-cols can't be used in combiantion with .wrap-cols
    */
    .#{$name}.equal {
        justify-content: flex-start;
        &>* {
            flex: 1;
            flex-basis: 0;
        }
    }
    /**
     * .wrap-cols sets flex-wrap: wrap, to force children whose width expands past
     * the width of the parent row to wrap to the next line.
     * Children need to have width classes set appropriately, which means
     * .wrap-cols can't be used in combiantion with .equal-cols or .expand
     *
     * For consistency across wrapped lines, all child elements have the same margin left and right.
     * (Unlike single row, where :first-child has left-margin removed, as do :last-child and margin-right)
    */
    .#{$name}.wrap {
        justify-content: flex-start;
        flex-wrap: wrap;
        margin-left: -$gutter;
        margin-right: -$gutter;
    }
    .#{$name}.wrap>* {
        &:first-child {
            margin-left: $gutter;
        }
        &:last-child {
            margin-right: $gutter;
        }
    }
    /**
     * Add default spacing for columns
    */
    .#{$name}>.three-quarters {
        width: 75%;
    }
    .#{$name}>.two-thirds {
        width: 66.67%;
    }
    .#{$name}>.half {
        width: 50%;
    }
    .#{$name}>.third {
        width: 33.33%;
    }
    .#{$name}>.quarter {
        width: 25%;
    }
    .#{$name}>.fifth {
        width: 20%;
    }
    .#{$name}>* {
        margin-left: $gutter;
        margin-right: $gutter;
        &:first-child {
            margin-left: 0;
        }
        &:last-child {
            margin-right: 0;
        }
    }
    /**
    * Responsively collapse rows to columns on mobile screen
    * If there's a .not-responsive class added, this has no effect
    */
    .#{$name}:not(.not-responsive) {
        @media screen and (min-width: $mobile) and (max-width: $tablet - 1px) {
            flex-direction: column;
            @include fbx-collapse-cols($vertical-gutter);
        }
    }
    /**
    * If there's a .tablet-responsive class, responsively collapse rows
    * to columns on a tablet portrait screen
    */
    .#{$name}.tablet-responsive {
        @media screen and (min-width: $mobile) and (max-width: $tablet) {
            flex-direction: column;
            @include fbx-collapse-cols($vertical-gutter);
        }
    }
    /**
    * Adding a .vertical class collapses to columns straight away, regardless of screen width
    */
    .#{$name}.vertical {
        flex-direction: column;
        @include fbx-collapse-cols($vertical-gutter);
    }
    /**
    * A convenience class to vertically and horizontally center child(ren) in the parent flex container.
    * Gutters are ignored in this case (as it doesn't use  justify-content: space-between)
    */
    .#{$name}.center {
        justify-content: center;
        align-items: center;
    }
}

@mixin fbx-collapse-cols($vertical-gutter) {
    & {
        margin-left: 0;
        margin-right: 0;
    }
    &>* {
        &:not(:last-child) {
            margin-left: 0;
            margin-right: 0;
            width: 100%;
            margin-bottom: $vertical-gutter;
        }
        &:last-child {
            margin-left: 0;
            margin-right: 0;
            width: 100%;
        }
    }
}
